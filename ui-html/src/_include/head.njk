<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<title>{{ title }}</title>
<meta name="description" content=" {{ description }}" />
<meta name="author" content="{{ author }}" />
<meta name="keywords" content="{{ keywords }}" />

<link rel="icon" href="favicon.ico" />
<link rel="stylesheet" href="./o_0.css" />
<link rel="preload" href="https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.9.0/build/styles/gradient-dark.min.css" as="style" onload="this.onload=null;this.rel='stylesheet'">
<noscript><link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.9.0/build/styles/gradient-dark.min.css"></noscript>
<script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.14.1/dist/cdn.min.js"></script>
<script defer src="https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.10.0/build/highlight.min.js"></script>
<script defer src="https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.9.0/build/languages/css.min.js"></script>
<script defer src="https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.9.0/build/languages/xml.min.js"></script>
<script defer src="https://cdn.jsdelivr.net/npm/canvas-confetti@1.9.3/dist/confetti.browser.min.js"></script>
<script>
  function tabs() {
    return {
      activeTab: 'sprite',
      tabs: {
        'sprite': 'Sprite',
        'css': 'CSS',
        'html': 'HTML',
      },
      changeTab(tab) {
        this.activeTab = tab;
      }
    }
  };

  function calculateSha256(body) {
    const encoder = new TextEncoder();
    const data = encoder.encode(body);
    return crypto.subtle.digest('SHA-256', data).then((buffer) => {
      const hashArray = Array.from(new Uint8Array(buffer));
      const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
      return hashHex;
    });
  }

  function spriteForm() {
    return {
      formData: {
        format: 'webp',
        files: [],
      },
      result: {
        SpriteUrl: '',
        Css: '',
        Html: '',
        ZipUrl: '',
      },
      getUrlApi: 'https://d1w4q4x2bl8828.cloudfront.net/api/url',
      processApi: 'https://d1w4q4x2bl8828.cloudfront.net/api/process',
      state: 'idle',
      buttonLabel: 'Submit',
      message: '',

      async submitForm() {
        this.buttonLabel = 'Submitting...';
        this.state = 'loading';
        this.message = '';

        if (this.formData.files.length === 0) {
          this.showError('Please upload at least one image.');
          return;
        }

        if (this.formData.files.length > 25) {
          this.showError('You can upload up to 25 images.');
          return;
        }

        if (this.formData.files.some(file => file.size > 2 * 1024 * 1024)) {
          this.showError('Each image should be less than 2MB.');
          return;
        }

        try {
          const urlJson = await this.fetchUrlJson();
          await this.uploadFiles(urlJson);
          await this.processFiles(urlJson);
          confetti();
          hljs.highlightAll();
          this.state = 'success';
        } catch (error) {
          this.showError(error.message);
        } finally {
          this.buttonLabel = 'Submit';
        }
      },

      async fetchUrlJson() {
        const response = await fetch(this.getUrlApi, { method: 'GET' });
        if (!response.ok) throw new Error('Something went wrong. Please try again later.');
        return response.json();
      },

      async uploadFiles(urlJson) {
        const promises = this.formData.files.map(file => this.uploadFile(file, urlJson));
        await Promise.all(promises);
      },

      async uploadFile(file, urlJson) {
        const formData = new FormData();
        Object.entries(urlJson.fields).forEach(([key, value]) => formData.append(key, value));
        formData.append('Content-Type', file.type);
        formData.append('file', file);

        const response = await fetch(urlJson.url, { method: 'POST', body: formData });
        if (!response.ok) throw new Error("Damn! Couldn't upload the file.");
      },

      async processFiles(urlJson) {
        const fileKeys = this.formData.files.map(file => urlJson.fields.key.replace('${filename}', file.name));
        const bodyString = JSON.stringify({ files: fileKeys, format: this.formData.format });

        const response = await fetch(this.processApi, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'x-amz-content-sha256': await calculateSha256(bodyString),
          },
          body: bodyString,
        });

        if (!response.ok) {
          const error = await response.text();
          throw new Error(error ?? 'Something went wrong. Please try again later.');
        }

        this.result = await response.json();
      },

      showError(message) {
        this.message = message;
        this.state = 'error';
        this.buttonLabel = 'Submit'
      },
    }
  } 
</script>
